<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">
	<import resource="classpath:domain/config-spring.xml" />

	<!-- Poperties -->
	<context:property-placeholder properties-ref="properties" location="classpath:common.properties" />

	<!-- Scan Package -->
	<context:component-scan base-package="com.nemustech.adapter com.nemustech.common com.nemustech.web">
		<context:exclude-filter type="aspectj" expression="com.nemustech..option.*" />
	</context:component-scan>

	<bean class="com.nemustech.web.option.ResponseEntityExceptionHandler2" />

	<!-- Locale -->
	<!-- <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver"> -->
	<!-- <property name="defaultLocale" value="en" /> -->
	<!-- </bean> -->

	<!-- Messages (id는 반드시 messageSource) -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames" value="classpath:messages/messages" />
		<property name="defaultEncoding" value="UTF-8" />
		<property name="cacheSeconds" value="3" />
	</bean>

	<bean id="log4jdbcProxyDataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
		<constructor-arg ref="dataSource" />
		<property name="logFormatter">
			<bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
				<property name="loggingType" value="MULTI_LINE" />
				<!-- <property name="margin" value="19" /> -->
				<property name="sqlPrefix" value="Binded SQL : " />
			</bean>
		</property>
	</bean>

	<!-- Transaction -->
	<tx:annotation-driven proxy-target-class="true" />

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="log4jdbcProxyDataSource" />
	</bean>

	<!-- MyBatis -->
	<!-- <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> -->
	<bean id="sqlSessionFactory" class="com.nemustech.common.db.mybatis.RefreshableSqlSessionFactoryBean">
		<property name="dataSource" ref="log4jdbcProxyDataSource" />
		<property name="configLocation" value="classpath:config-mybatis.xml" />
		<property name="mapperLocations" value="classpath:mapper/${datasource.type}/**/*.xml" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="#{properties['mybatis.mapper.basePackage']}" />
	</bean>

	<!-- MyBatis ORM (sourceType : mysql, oracle, sqlserver) -->
	<bean class="org.mybatisorm.EntityManager">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
		<property name="sourceType" value="${datasource.type}" />
	</bean>

	<!-- RestTemplate -->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetObject" value="#{@systemProperties}" />
		<property name="targetMethod" value="putAll" />
		<property name="arguments">
			<props>
				<prop key="http.maxConnections">100</prop>
			</props>
		</property>
	</bean>

	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
		<constructor-arg>
			<bean class="org.springframework.http.client.HttpComponentsClientHttpRequestFactory">
				<property name="connectTimeout" value="2000" />
				<property name="readTimeout" value="600000" />
			</bean>
		</constructor-arg>
	</bean>

	<!-- Validation -->
	<!-- <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" /> -->
	<!-- <bean class="org.springframework.validation.beanvalidation.MethodValidationPostProcessor" /> -->
	<!-- <bean id="webBindingInitializer" class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer"> -->
	<!-- <property name="validator" ref="validator" /> -->
	<!-- </bean> -->

	<!-- AOP -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- Logging -->
	<bean id="logAdvice" class="com.nemustech.web.aop.LogAdvice" />

	<aop:config proxy-target-class="true">
		<aop:pointcut id="publicMethod"
			expression="execution(public * com.nemustech..*Controller.*(..)) or execution(public * com.nemustech..*Service.*(..))" />
		<aop:aspect ref="logAdvice">
			<!-- <aop:before method="before" pointcut-ref="publicMethod" /> -->
			<!-- <aop:after-returning method="afterReturning" pointcut-ref="publicMethod" returning="result" /> -->
			<!-- <aop:after-throwing method="afterThrowing" pointcut-ref="publicMethod" throwing="ex" /> -->
			<!-- <aop:after method="after" pointcut-ref="publicMethod" /> -->
			<aop:around method="around" pointcut-ref="publicMethod" />
		</aop:aspect>
	</aop:config>

	<!-- Cache -->
	<cache:annotation-driven proxy-target-class="true" />

	<!-- EHCache -->
	<bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="shared" value="true" />
		<property name="configLocation" value="classpath:ehcache.xml" />
		<property name="cacheManagerName" value="nemustech-common" />
	</bean>

	<bean id="cacheManager" class="com.nemustech.common.cache.EhCacheCacheManager2">
		<property name="cacheManager" ref="ehcache" />
	</bean>

	<!-- Redis -->
	<!-- <bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer" /> -->
	<!-- <bean id="jsonRedisSerializer" class="org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer"> -->
	<!-- <constructor-arg name="type" value="java.lang.Object" /> -->
	<!-- </bean> -->

	<!-- <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory "> -->
	<!-- <property name="usePool" value="true" /> -->
	<!-- <property name="hostName" value="localhost" /> -->
	<!-- <property name="port" value="3128" /> -->
	<!-- <property name="password" value="1234" /> -->
	<!-- </bean> -->

	<!-- <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"> -->
	<!-- <property name="connectionFactory" ref="jedisConnectionFactory" /> -->
	<!-- <property name="keySerializer" ref="jsonRedisSerializer" /> -->
	<!-- <property name="valueSerializer" ref="jsonRedisSerializer" /> -->
	<!-- <property name="hashKeySerializer" ref="jsonRedisSerializer" /> -->
	<!-- <property name="hashValueSerializer" ref="jsonRedisSerializer" /> -->
	<!-- </bean> -->

	<!-- <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager"> -->
	<!-- <constructor-arg name="redisOperations" ref="redisTemplate" /> -->
	<!-- </bean> -->

	<!-- Task -->
	<task:annotation-driven proxy-target-class="true" executor="executor" scheduler="scheduler" />

	<task:executor id="executor" pool-size="10-100" queue-capacity="0" keep-alive="10" rejection-policy="CALLER_RUNS" />
	<task:scheduler id="scheduler" pool-size="100" />

	<!-- Scheduler Dual -->
	<bean class="com.nemustech.common.service.impl.SchedulerDualServiceImpl" />

	<!-- Web -->
	<bean class="org.springframework.web.servlet.view.BeanNameViewResolver" />
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<mvc:cors>
		<mvc:mapping path="*" />
	</mvc:cors>
</beans>