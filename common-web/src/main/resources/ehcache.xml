<?xml version="1.0" encoding="UTF-8"?>
<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ehcache.org/ehcache.xsd"
	updateCheck="false" maxBytesLocalHeap="500m">
	<!-- 디스크 저장 경로를 지정한다. -->
	<!-- <diskStore path="java.io.tmpdir" /> -->
	<!-- 캐쉬에 저장할 객체 레퍼런스의 최대값 -->
	<sizeOfPolicy maxDepth="50000" />

	<!-- 분산 노드를 발견하는 방식을 지정한다. -->
	<!-- 1. 자동 방식 -->
	<!-- - timeToLive : specify a value between 0 and 255 which determines how far the packets will propagate. -->
	<!-- By convention, the restrictions are: -->
	<!-- 0 - the same host -->
	<!-- 1 - the same subnet -->
	<!-- 32 - the same site -->
	<!-- 64 - the same region -->
	<!-- 128 - the same continent -->
	<!-- 255 - unrestricted -->
<!-- 	<cacheManagerPeerProviderFactory class="net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory" -->
<!-- 		properties="peerDiscovery=automatic, -->
<!-- 			multicastGroupAddress=230.0.0.1, -->
<!-- 			multicastGroupPort=4446, -->
<!-- 			timeToLive=32" /> -->
	<!-- 2. 수동 방식 -->
	<!-- - rmiUrls : 분산 노드에 참여할 서버 및 캐시 목록을 지정한다. 현재 노드의 정보는 포함시켜서는 안된다. -->
	<!-- <cacheManagerPeerProviderFactory class="net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory" -->
	<!-- properties="peerDiscovery=manual, -->
	<!-- rmiUrls=//server2:40001/common|server2:40001/sample"/> -->

	<!-- 클러스터에 있는 다른 노드에서 발생한 변경 정보를 수신할때 사용할 포트 번호를 지정한다. (로컬 테스트시 다르게 지정) -->
	<!-- - socketTimeoutMillis : 이 노드에 메시지를 보냈을때 메시지 전송을 기다리는 시간. 기본값은 2000ms. -->
<!-- 	<cacheManagerPeerListenerFactory class="net.sf.ehcache.distribution.RMICacheManagerPeerListenerFactory" -->
<!-- 		properties="port=40001" /> -->

	<!-- 코드에서 캐시를 직접 생성할때 사용되는 캐시의 기본 설정값을 저장한다. [필수] -->
	<!-- - maxElementsInMemory : 메모리에 저장될 수 있는 객체의 최대 개수 [필수] -->
	<!-- - eternal : 이 값이 true이면 timeout 관련 설정은 무시되고, Element가 캐시에서 삭제되지 않는다. [필수] -->
	<!-- - overflowToDisk : 메모리에 저장된 객체 개수가 maxElementsInMemory에서 지정한 값에 다다를 경우 디스크에 오버플로우 되는 객체는 저장할 지의 여부를 지정한다. [필수] -->
	<!-- - timeToIdleSeconds : Element가 지정한 시간 동안 사용(조회)되지 않으면 캐시에서 제거된다. 이 값이 0인 경우 조회 관련 만료 시간을 지정하지 않는다. 기본값은 0이다. [선택] -->
	<!-- - timeToLiveSeconds : Element가 존재하는 시간. 이 시간이 지나면 캐시에서 제거된다. 이 시간이 0이면 만료 시간을 지정하지 않는다. 기본값은 0이다. [선택] -->
	<!-- - diskPersistent : VM이 재 가동할때 디스크 저장소에 캐싱된 객체를 저장할지의 여부를 지정한다. 기본값은 false이다. [선택] -->
	<!-- - diskExpiryThreadIntervalSeconds : Disk Expiry 쓰레드의 수행 시간 간격을 초 단위로 지정한다. 기본값은 120 이다. [선택] -->
	<!-- - memoryStoreEvictionPolicy : 객체의 개수가 maxElementsInMemory에 도달했을때,메모리에서 객체를 어떻게 제거할 지에 대한 정책을 지정한다. 기본값은 LRU이다. FIFO와 
		LFU도 지정할 수 있다. -->
	<defaultCache eternal="false" overflowToDisk="false">
		<!-- 언제 어떻게 캐시의 변경 내역을 통지할지 여부를 지정한다. -->
		<!-- - replicatePuts : 캐시에 새로운 요소가 추가됐을때 다른 노드에 복사할지의 여부. 기본값은 true -->
		<!-- - replicateUpdates : 캐시 요소의 값이 변경되었을때 다른 노드에 값을 복사할지의 여부. 기본값은 true -->
		<!-- - replicateRemovals : 캐시 요소가 삭제되었을때 다른 노드에 반영할지의 여부. 기본값은 true -->
		<!-- - replicateAsynchronously : 비동기로 값을 복사할지의 여부. 기본값은 true -->
		<!-- - replicateUpdatesViaCopy : 새로운 요소를 다른 노드에 복사할 지 아니면 삭제 메시지를 보낼지의 여부. 기본값은 true -->
		<!-- - asynchronousReplicationIntervalMillis : 비동기 방식을 사용할때 변경 내역을 다른 노드에 통지하는 주기. 기본값은 1000 -->
<!-- 		<cacheEventListenerFactory class="net.sf.ehcache.distribution.RMICacheReplicatorFactory" -->
<!-- 			properties="replicatePuts=false, -->
<!-- 			replicateUpdates=false, -->
<!-- 			replicateAsynchronously=false, -->
<!-- 			replicateUpdatesViaCopy=false" /> -->

		<!-- CacheManager가 초기화될때 클러스터에 있는 다른 캐시로부터 데이터를 로딩한다. 이는 초기 구동이 완료된 후 곧 바로 서비스를 제공할 수 있음을 의미한다. -->
		<!-- bootstrapAsynchronously : 비동기적으로 수행할지의 여부를 지정. 기본값은 true -->
		<!-- maximumChunkSizeBytes : 클러스터의 다른 노드로부터 로딩 가능한 데이터의 최대 크기. 기본값은 5000000bytes (5MB) -->
		<!-- <bootstrapCacheLoaderFactory class="net.sf.ehcache.distribution.RMIBootstrapCacheLoaderFactory" /> -->
	</defaultCache>

	<!-- 하나의 캐시(저장소)를 지정할때 사용된다. -->
	<!-- - name : 캐시의 이름을 지정하며, 코드에서는 이 캐시의 이름을 사용하여 사용할 Cache 인스턴스를 구한다. -->
	<cache name="common" eternal="false" overflowToDisk="false">
<!-- 		<cacheEventListenerFactory class="net.sf.ehcache.distribution.RMICacheReplicatorFactory" -->
<!-- 			properties="replicatePuts=false, -->
<!-- 			replicateUpdates=false, -->
<!-- 			replicateAsynchronously=false, -->
<!-- 			replicateUpdatesViaCopy=false" /> -->
	</cache>

	<cache name="sample" eternal="false" overflowToDisk="false">
<!-- 		<cacheEventListenerFactory class="net.sf.ehcache.distribution.RMICacheReplicatorFactory" -->
<!-- 			properties="replicatePuts=false, -->
<!-- 			replicateUpdates=false, -->
<!-- 			replicateAsynchronously=false, -->
<!-- 			replicateUpdatesViaCopy=false" /> -->
	</cache>
</ehcache>