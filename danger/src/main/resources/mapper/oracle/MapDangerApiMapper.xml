<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nemustech.platform.lbs.wwms.mapper.MapDangerApiMapper">
	<!-- ORDER BY factory_uid ASC -->
	<select id="selectFactoryList" resultType="FactoryVo">
		SELECT 
			factory_uid,
			name,
			is_factory,
			is_restricted
		FROM tbda_factory
		ORDER BY name ASC
	</select>
	
	<!--  -->
	<select id="selectFactoryCoordList" resultType="FactoryCoordVo">
		SELECT 
			factory_uid,
			order_no,
			x,
			y,
			latitude,
			longitude
		FROM tbda_factory_coord
		ORDER BY factory_uid, order_no ASC
	</select>
		
	<!-- ORDER BY zone_uid, factory_uid ASC -->
	<select id="selectZoneList" resultType="ZoneVo">
		SELECT 
			zone_uid,
			factory_uid,
			name,
			is_restricted
		FROM tbda_zone
		ORDER BY name ASC
	</select>
	
	
	<!--  -->
	<select id="selectZoneCoordList" resultType="ZoneCoordVo">
		SELECT 
			zone_uid,
			order_no,
			x,
			y,
			latitude,
			longitude
		FROM tbda_zone_coord
		ORDER BY zone_uid, order_no ASC
	</select>
	
	<!--  -->
	<update id="updateAllowedFactoryAll">
			UPDATE tbda_factory
			SET	
				is_restricted = 0,
				upd_date = SYSDATE		
	</update>
	
	<update id="updateFactoryRestrict" parameterType="MapFactoryRestrictUpdateRequestVo">
			UPDATE tbda_factory
			SET	
				is_restricted = 1,
				upd_date = SYSDATE
			WHERE
				factory_uid in
				<foreach collection="factoryList" item="item" separator="," open="(" close=")">
            		#{item}
        		</foreach>		
	</update>
	
	<!--  -->
	<update id="updateAllowedZoneAll">
			UPDATE tbda_zone
			SET	
				is_restricted = 0,
				upd_date = SYSDATE		
	</update>
	
	<update id="updateZoneRestrict" parameterType="MapZoneRestrictUpdateRequestVo">
			UPDATE tbda_zone
			SET	
				is_restricted = 1,
				upd_date = SYSDATE
			WHERE
				zone_uid in
				<foreach collection="zoneList" item="item" separator="," open="(" close=")">
            		#{item}
        		</foreach>		
	</update>
	
	<!-- 
	 * [2016/08/19] map_work_status.do와 map_worker_status.do로 구분 
	 * 
	 * 1 : map_work_status.do는 작업기준(1일기준) 위험지역 현황
	 * 2 : map_worker_status.do는 현재작업중인(is_completed기주) 위험지역 현황
	 * 
	 * 단, MapWorkStatusList, MapWorkStatusRequestVo는 동일하게 이용하고 확장한다. 
	 *
	 * [주의] WORK and WORKER
	-->
	<!-- 
		참고 : 
		규칙 LEFT OUTER JOIN 시 ON 절에서는  
		우측(널값으로 채워지는 쪽)의 추가 제약조건을 넣고 
		좌측의 추가 제약조건은 WHERE절에 넣어야 한다.  
		
		반드시 추가 사항 : and w.starting_date <![CDATA[ >=]]> TRUNC(SYSDATE) 
    -->	
<!-- 
	작업자수(작업중,완료), 작업수(작업중,완료) WHERE 오늘기준
	[2016/08/24] [Deprecated] 작업자 수는 실제작업자가 아니고 등록되어 있던 사람의 수
	[2016/08/26] [개념변경] tbda_worker_assigned.worker_count 추가하고 이것으로 카운트 수
-->
<select id="selectWorkStatusOnFactories" parameterType="MapWorkStatusRequestVo" resultType="MapWorkStatusOnFactoriesVo">
SELECT
	FT.factory_uid as factory_uid,
	FT.name as factory_name,
	NVL(IWK.work_completed_cnt,0) as work_completed_cnt,
	NVL(IWK.work_working_cnt,0) as work_working_cnt,
	NVL(IWK.people_completed_cnt,0) as people_completed_cnt,
	NVL(IWK.people_working_cnt,0) as people_working_cnt
FROM
	(
		select * 
		from tbda_factory 
		where 
			is_restricted = 1
			<if test="type == 'factory'">
			and factory_uid = #{uid}
			</if>				
	) as FT
	left outer join (
		select
			w.factory_uid,
			sum(case when w.is_completed = 1 then 1 else 0 end) as work_completed_cnt,
			sum(
				(
					select case when count(*) > 0 then 1 else 0 end as count1 
                    from tbda_worker_assigned a 
                    where a.work_uid = w.work_uid 
                    and a.is_completed = 0
                )
			) as work_working_cnt,
			sum(
				(
					select sum(a.worker_count)
					from tbda_worker_assigned a
					where
						a.work_uid = w.work_uid
						and a.is_completed = 1	
				)
			) as people_completed_cnt,
			sum(
				(
					select sum(a.worker_count)
					from tbda_worker_assigned a
					where
						a.work_uid = w.work_uid
						and a.is_completed = 0	
				)
			) as people_working_cnt
		from tbda_work as w
		where
			w.starting_date <![CDATA[ >=]]> TRUNC(SYSDATE)
			and w.is_deleted = 0
			<if test="type == 'factory'">
			and factory_uid = #{uid}
			</if>
			<if test="work_type != null and work_type > ''">
			and w.work_uid in (select t.work_uid from tbda_work_on_type t where w.work_uid = t.work_uid and t.work_type = #{work_type})
			</if>
		group by w.factory_uid		
	) as IWK
	ON FT.factory_uid = IWK.factory_uid
ORDER BY 1	
			
</select>

	
	<!-- 
		참고 : 
		규칙 LEFT OUTER JOIN 시 ON 절에서는  
		우측(널값으로 채워지는 쪽)의 추가 제약조건을 넣고 
		좌측의 추가 제약조건은 WHERE절에 넣어야 한다. 
		
		반드시 추가 사항 : and w.starting_date <![CDATA[ >=]]> TRUNC(SYSDATE) 
    -->	
<!-- 
	작업자수(작업중,완료), 작업수(작업중,완료) WHERE 오늘기준
	[2016/08/24] 작업자 수는 실제작업자가 아니고 등록되어 있던 사람의 수
-->  
<select id="selectWorkStatusOnZones" parameterType="MapWorkStatusRequestVo" resultType="MapWorkStatusOnZonesVo">
SELECT
	ZN.zone_uid as zone_uid,
	ZN.name as zone_name,
	NVL(IWK.work_completed_cnt,0) as work_completed_cnt,
	NVL(IWK.work_working_cnt,0) as work_working_cnt,
	NVL(IWK.people_completed_cnt,0) as people_completed_cnt,
	NVL(IWK.people_working_cnt,0) as people_working_cnt
FROM
	(
		select * 
		from tbda_zone 
		where 
			is_restricted = 1		
			<if test="type == 'factory'">
			and factory_uid = #{uid}
			</if>	
			<if test="type == 'zone'">
			and zone_uid = #{uid}
			</if>			
	) as ZN
	left outer join (
		select
			w.zone_uid,
			sum(case when w.is_completed = 1 then 1 else 0 end) as work_completed_cnt,
			sum(
				(
					select case when count(*) > 0 then 1 else 0 end as count1 
                    from tbda_worker_assigned a 
                    where a.work_uid = w.work_uid 
                    and a.is_completed = 0
                )			
			) as work_working_cnt,
			sum(
				(
					select sum(a.worker_count)
					from tbda_worker_assigned a
					where
						a.work_uid = w.work_uid
						and a.is_completed = 1	
				)
			) as people_completed_cnt,
			sum(
				(
					select sum(a.worker_count)
					from tbda_worker_assigned a
					where
						a.work_uid = w.work_uid
						and a.is_completed = 0	
				)
			) as people_working_cnt
		from tbda_work as w
		where
			w.starting_date <![CDATA[ >=]]> TRUNC(SYSDATE)
			and w.is_deleted = 0
			<if test="type == 'factory'">
			and w.factory_uid = #{uid}
			</if>
			<if test="type == 'zone'">
			and w.zone_uid = #{uid}
			</if>
			<if test="work_type != null and work_type > ''">
			and w.work_uid in (select t.work_uid from tbda_work_on_type t where w.work_uid = t.work_uid and t.work_type = #{work_type})
			</if>
		group by w.zone_uid		
	) as IWK
	ON ZN.zone_uid = IWK.zone_uid
ORDER BY 1	
</select>
	
	
	
	<!-- 
		참고 : 
		규칙 LEFT OUTER JOIN 시 ON 절에서는  
		우측(널값으로 채워지는 쪽)의 추가 제약조건을 넣고 
		좌측의 추가 제약조건은 WHERE절에 넣어야 한다.  
		
		반드시 추가 사항 : and w.starting_date <![CDATA[ >=]]> TRUNC(SYSDATE)
    -->
<!-- 
	작업자수(작업중,완료), 작업수(작업중,완료) WHERE 오늘기준
	[2016/08/24] 작업자 수는 실제작업자가 아니고 등록되어 있던 사람의 수
-->  
<select id="selectWorkStatusOnWorkType" parameterType="MapWorkStatusRequestVo" resultType="MapWorkStatusOnWorkTypeVo">
SELECT
	CD.order_no,
	CD.code as work_type,
	CD.name as work_type_name,
	NVL(IWK.work_completed_cnt,0) as work_completed_cnt,
	NVL(IWK.work_working_cnt,0) as work_working_cnt,
	NVL(IWK.people_completed_cnt,0) as people_completed_cnt,
	NVL(IWK.people_working_cnt,0) as people_working_cnt
FROM
	(
		select * 
		from tbcm_code 
		where 
		group_code = 'work_type'
		<if test="work_type != null and work_type > ''">
		and code = #{work_type}
		</if>
	) as CD
	left outer join (
		select
			t.work_type,
			sum(case when w.is_completed = 1 then 1 else 0 end) as work_completed_cnt,
			sum(
				(
					select case when count(*) > 0 then 1 else 0 end as count1 
                    from tbda_worker_assigned a 
                    where a.work_uid = w.work_uid 
                    and a.is_completed = 0
                )
			) as work_working_cnt,
			sum(
				(
					select sum(a.worker_count)
					from tbda_worker_assigned a
					where
						a.work_uid = w.work_uid
						and a.is_completed = 1	
				)
			) as people_completed_cnt,
			sum(
				(
					select sum(a.worker_count)
					from tbda_worker_assigned a
					where
						a.work_uid = w.work_uid
						and a.is_completed = 0	
				)
			) as people_working_cnt
		from tbda_work as w, tbda_work_on_type as t 
		where
			w.starting_date <![CDATA[ >=]]> TRUNC(SYSDATE)
			and w.work_uid = t.work_uid
			and w.is_deleted = 0
			<if test="type == 'factory'">
			and w.factory_uid = #{uid}
			</if>
			<if test="type == 'zone'">
			and w.zone_uid = #{uid}
			</if>
			<if test="work_type != null and work_type > ''">			
			and t.work_type = #{work_type}
			</if>
		group by t.work_type		
	) as IWK
	ON CD.code = IWK.work_type
ORDER BY 1
</select>
	
	
	
	
	
	<!-- 
	 * [2016/08/19] map_work_status.do와 map_worker_status.do로 구분 
	 * 
	 * 1 : map_work_status.do는 작업기준(1일기준) 위험지역 현황
	 * 2 : map_worker_status.do는 현재작업중인(is_completed기주) 위험지역 현황
	 * 
	 * 단, MapWorkStatusList, MapWorkStatusRequestVo는 동일하게 이용하고 확장한다. 
	 *
	 * [주의] WORK and WORKER
	-->
	<!-- 
		참고 : 
		규칙 LEFT OUTER JOIN 시 ON 절에서는  
		우측(널값으로 채워지는 쪽)의 추가 제약조건을 넣고 
		좌측의 추가 제약조건은 WHERE절에 넣어야 한다.  
		
		반드시 추가 사항 : and w.is_completed 기준 
    -->	
<!-- 작업자수(인가, 비인가), 작업수 WHERE is_completed = 0 -->      
<select id="selectWorkerStatusOnFactories" parameterType="MapWorkStatusRequestVo" resultType="MapWorkStatusOnFactoriesVo">
	select 
		FT.factory_uid as factory_uid, 
		FT.name as factory_name,
		NVL(t.people_authorized_cnt, 0) as people_authorized_cnt,
		NVL(t.people_unauthorized_cnt, 0)as people_unauthorized_cnt,
		NVL(t.worker_count, 0) as worker_count,
		( select count(*) from tbda_work w where w.is_completed = 0 and w.factory_uid = FT.factory_uid
		    and (SELECT count(*) FROM tbda_worker_assigned wa WHERE wa.work_uid = w.work_uid and wa.is_completed = 0) > 0
			<if test="work_type != null and work_type > ''">
			and w.work_uid in (select t.work_uid from tbda_work_on_type t where w.work_uid = t.work_uid and t.work_type = #{work_type})
			</if>		
		) as work_cnt 
	FROM 
	( select * from tbda_factory where is_restricted = 1 
		<if test="type == 'factory'">
			and factory_uid = #{uid}
		</if>
	) as FT 
	left outer join
	(     
		select
			factory_uid,
			NVL( sum(t.people_authorized_cnt) , 0 ) as people_authorized_cnt ,
			NVL( sum(t.people_unauthorized_cnt) , 0 ) as people_unauthorized_cnt, 
			NVL( sum(t.people_authorized_cnt+t.people_unauthorized_cnt) , 0 ) as worker_count
	    from (
			SELECT 
				eer.factory_uid as factory_uid,
				(CASE WHEN eer.is_restricted = 1 THEN NVL(wa.worker_count,1) ELSE 0 END) AS people_authorized_cnt,
				(CASE WHEN eer.is_restricted = 0 THEN NVL(wa.worker_count,1) ELSE 0 END) AS people_unauthorized_cnt
			FROM
				tbda_device d
			inner join tbda_enter_exit_record eer ON (d.device_no = eer.device_no AND eer.exit_date IS NULL)
			LEFT OUTER JOIN tbda_worker_assigned wa ON (wa.device_no = eer.device_no AND (wa.work_uid = eer.work_uid or d.worker_uid = eer.worker_uid) and wa.is_completed = 0)
			WHERE
				d.is_alive_report != 2 and eer.factory_uid is not null
		) as t
		group by t.factory_uid
	) t
	on FT.factory_uid = t.factory_uid
UNION ALL
	SELECT 
		-1 as factory_uid, 
	    '위치미확인' as factory_name,
	    NVL(SUM(people_authorized_cnt), 0) AS people_authorized_cnt,
	    NVL(SUM(people_unauthorized_cnt), 0) AS people_unauthorized_cnt,
	    NVL(SUM(worker_count), 0) AS worker_count,
		0 as work_cnt
	FROM
	(
		select 
			CASE WHEN wa.device_uid is not null THEN NVL(wa.worker_count,1) ELSE 1 END AS worker_count,
			CASE WHEN d.factory_uid = 999 THEN NVL(wa.worker_count,1) ELSE 0 END AS people_authorized_cnt,
			CASE WHEN d.factory_uid != 999 THEN NVL(wa.worker_count,1) ELSE 0 END AS people_unauthorized_cnt
		from
		(
			SELECT 
				d.device_uid, d.worker_uid, d.factory_uid
			FROM
				tbda_device d
			WHERE
				d.is_alive_report != 2
			AND d.device_no NOT IN (SELECT DISTINCT device_no FROM tbda_enter_exit_record eer WHERE exit_date IS NULL)
		) d
		left outer join tbda_worker_assigned wa ON (d.device_uid = wa.device_uid AND d.worker_uid = wa.worker_uid and wa.is_completed = 0)
	) t
	group by -1
ORDER BY 1	 
</select>

	
	<!-- 
		참고 : 
		규칙 LEFT OUTER JOIN 시 ON 절에서는  
		우측(널값으로 채워지는 쪽)의 추가 제약조건을 넣고 
		좌측의 추가 제약조건은 WHERE절에 넣어야 한다. 
		
		반드시 추가 사항 : and w.is_completed 기준 
    -->	
<!-- 작업자수(인가, 비인가), 작업수 WHERE is_completed = 0 -->         
<select id="selectWorkerStatusOnZones" parameterType="MapWorkStatusRequestVo" resultType="MapWorkStatusOnZonesVo">
	select 
		FT.zone_uid as zone_uid, 
		FT.name as zone_name,
		NVL(t.people_authorized_cnt, 0) as people_authorized_cnt,
		NVL(t.people_unauthorized_cnt, 0)as people_unauthorized_cnt,
		NVL(t.worker_count, 0) as worker_count,
		( select count(*) from tbda_work w where w.is_completed = 0 and w.zone_uid = FT.zone_uid 
			and (SELECT count(*) FROM tbda_worker_assigned wa WHERE wa.work_uid = w.work_uid and wa.is_completed = 0) > 0
			<if test="work_type != '' and work_type != null ">
			and w.work_uid in (select t.work_uid from tbda_work_on_type t where w.work_uid = t.work_uid and t.work_type = #{work_type})
			</if>		
		) as work_cnt 
	FROM 
	( select * from tbda_zone where is_restricted = 1 
		<if test="type == 'factory'">
		and factory_uid = #{uid}
		</if>	
		<if test="type == 'zone'">
		and zone_uid = #{uid}
		</if>	
	) as FT 
	left outer join
	(     
		select
			zone_uid,
			NVL( sum(t.people_authorized_cnt) , 0 ) as people_authorized_cnt ,
			NVL( sum(t.people_unauthorized_cnt) , 0 ) as people_unauthorized_cnt, 
			NVL( sum(t.people_authorized_cnt+t.people_unauthorized_cnt) , 0 ) as worker_count
	    from (
			SELECT 
				eer.zone_uid as zone_uid,
				(CASE WHEN eer.is_restricted = 1 THEN NVL(wa.worker_count,1) ELSE 0 END) AS people_authorized_cnt,
				(CASE WHEN eer.is_restricted = 0 THEN NVL(wa.worker_count,1) ELSE 0 END) AS people_unauthorized_cnt
			FROM
				tbda_device d
			INNER JOIN tbda_enter_exit_record eer ON (d.device_no = eer.device_no AND eer.exit_date IS NULL)
		 	LEFT OUTER JOIN tbda_worker_assigned wa ON (wa.device_no = eer.device_no AND wa.work_uid = eer.work_uid and wa.is_completed = 0)
			WHERE
				d.is_alive_report != 2 and eer.zone_uid is not null
		) as t
		group by t.zone_uid
	) t
	on FT.zone_uid = t.zone_uid	
</select>
	
	<!-- 
		참고 : 
		규칙 LEFT OUTER JOIN 시 ON 절에서는  
		우측(널값으로 채워지는 쪽)의 추가 제약조건을 넣고 
		좌측의 추가 제약조건은 WHERE절에 넣어야 한다.  
		
		반드시 추가 사항 : and w.is_completed 기준 
    -->	
<!-- 작업자수, 작업수 WHERE is_completed = 0 -->         
<select id="selectWorkerStatusOnWorkType" parameterType="MapWorkStatusRequestVo" resultType="MapWorkStatusOnWorkTypeVo">
SELECT
	CD.order_no,
	CD.code as work_type,
	CD.name as work_type_name,
	(
		select sum(was.worker_count) 
		from tbda_work w, tbda_worker_assigned was
		where
			w.is_completed = 0
			and w.is_deleted = 0
			and was.is_completed = 0
			and w.work_uid = was.work_uid
			<if test="type == 'factory'">
			and w.factory_uid = #{uid}
			</if>	
			<if test="type == 'zone'">
			and w.zone_uid = #{uid}
			</if>
			and w.work_uid in (select t.work_uid from tbda_work_on_type t where w.work_uid = t.work_uid and t.work_type = CD.code)		
	) as people_cnt,	
	(
		select count(*) 
		from tbda_work w, tbda_worker_assigned was
		where
			w.is_completed = 0
			and w.is_deleted = 0
			and was.is_completed = 0
			and w.work_uid = was.work_uid
			<if test="type == 'factory'">
			and w.factory_uid = #{uid}
			</if>	
			<if test="type == 'zone'">
			and w.zone_uid = #{uid}
			</if>
			and w.work_uid in (select t.work_uid from tbda_work_on_type t where w.work_uid = t.work_uid and t.work_type = CD.code)		
	) as work_cnt
FROM
	(
		select * 
		from tbcm_code 
		where 
		group_code = 'work_type'
		<if test="work_type != null and work_type > ''">
		and code = #{work_type}
		</if>
	) as CD
ORDER BY 1
</select>
	

</mapper>